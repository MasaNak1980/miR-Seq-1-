#single-end のデータで解析

#trim_galoreでtrimming
module load Trim_Galore/0.6.6-GCCcore-10.2.0-Python-3.8.6
for sample in `ls *_L003_R1_001.fastq | xargs basename -s .fastq | uniq`; do echo trimming:${sample}; trim_galore ${sample}.fastq;done; echo finished

#mapping 
for sample in `ls *_trimmed.fq | xargs basename -s .fq | uniq`; do echo pre_mapping:${sample}; mapper.pl ${sample}.fq -h -g hsa -e -j -k AACTGTAGGCACCATCAAT -l 18 -m -p ../ref/homosapiens -s ${sample}_fastq_output_fastq.collapsed -t ${sample}_reads_collapsed_vs_genome.arf -v;done; echo finished

#発現量推定　　bashで
#!/bin/bash
#SBATCH --job-name=miRDeep2_Lonza_exos_3
#SBATCH --out="slurm-%j.out"
#SBATCH --time=1-08:01:00
#SBATCH --nodes=1 --ntasks=1 --cpus-per-task=1
#SBATCH --mem-per-cpu=8G
#SBATCH --mail-type=ALL

mem_bytes=$(</sys/fs/cgroup/memory/slurm/uid_${SLURM_JOB_UID}/job_${SLURM_JOB_ID}/memory.limit_in_bytes)
mem_gbytes=$(( $mem_bytes / 1024 **3 ))

echo "Starting at $(date)"
echo "Job submitted to the ${SLURM_JOB_PARTITION} partition, the default partition on ${SLURM_CLUSTER_NAME}"
echo "Job name: ${SLURM_JOB_NAME}, Job ID: ${SLURM_JOB_ID}"
echo "  I have ${SLURM_CPUS_ON_NODE} CPUs and ${mem_gbytes}GiB of RAM on compute node $(hostname)"

module load miniconda
conda activate bioinfo
for sample in `ls *_trimmed.fq | xargs basename -s .fq | uniq`; do echo miRDeep2:${sample}; miRDeep2.pl ${sample}_fastq_output_fastq.collapsed ../ref/new_hg38.fa ${sample}_reads_collapsed_vs_genome.arf ../ref/new_mature.fa none ../ref/new_hairpin.fa -t hsa -p;done; echo finished

#DESeq2 Rで　別途データあり
library(DESeq2)
library(ggplot2)
library(pheatmap)


setwd("~/Dropbox/BioAnalysis/09142022")

# Dataを整理する 
HSE002 <- read.table(file = 'miRNAs_expressed_all_samples_HSE002.csv', sep = '\t', header = FALSE)
remove <- c(3,4,5,6) #read_countを使うことに。
HSE002 <- HSE002[,-remove]
write.csv(HSE002, "HSE002.csv", row.names = TRUE)
head(HSE002)

HSE003 <- read.table(file = 'miRNAs_expressed_all_samples_HSE003.csv', sep = '\t', header = FALSE)
HSE003 <- HSE003[,-remove]
write.csv(HSE003, "HSE003.csv", row.names = TRUE)
head(HSE003)

NHM004 <- read.table(file = 'miRNAs_expressed_all_samples_NHM004.csv', sep = '\t', header = FALSE)
NHM004 <- NHM004[,-remove]
write.csv(NHM004, "NHM004.csv", row.names = TRUE)
head(NHM004)

NHM009 <- read.table(file = 'miRNAs_expressed_all_samples_NHM009.csv', sep = '\t', header = FALSE)
NHM009 <- NHM009[,-remove]
write.csv(NHM009, "NHM009.csv", row.names = TRUE)
head(NHM009)

##Dataの結合　横につなげる
miR <- cbind(HSE002,HSE003, NHM004,NHM009) #Dataの結合　横につなげる
head(miR)

miR_name <- miR[,1]
head(miR_name)
removeR <- c(1,3,5,7,9)
miR <- miR[,-removeR]
head(miR)
write.csv(miR,"miR.csv")

miR <- as.matrix(read.csv("miR.csv", header = T))
head(miR)
rownames(miR) <- miR_name
miR <- miR[, -1]
head(miR)

colnames(miR) <- c("HSE002", "HSE003", "NHM004", "NHM009")
head(miR)


#　Load the data into DESeq2. Prefilter the data to remove miR- NAs that have only 0 or 1 read. Run the differential expression analysis with default setting
library(DESeq2)

sampleTable <- data.frame(condition=factor(c("Serum_exos", "Serum_exos", "hMSC_exos", "hMSC_exos")))
sampleTable
rownames(sampleTable) <- colnames(miR)
sampleTable

dds <- DESeqDataSetFromMatrix(countData = miR, colData = sampleTable, design = ~ condition)
dds <- dds [rowSums(counts(dds)) > 1,]
print(dds)
dds_wt = DESeq(dds)
res_wt<- results(dds_wt)
res_wt
res_wt_naomit <- na.omit(res_wt) # NA を除外
mcols(res_wt_naomit)$description
summary(res_wt_naomit)


mirnaresult = as.data.frame(res_wt_naomit)
diff = mirnaresult[mirnaresult$padj<0.1,]
write.csv(diff,"DE_miRNA.csv")

#発現変動のある転写産物を補正済みp値の低い順に並べる
res_wt_naomit
res_wt_naomit_sort <- res_wt_naomit[order(res_wt_naomit$padj),]
#発現変動の大きな遺伝子、上位20個を表示させる（補正済みp値の低い20遺伝子）
head(res_wt_naomit_sort, 20)
#各カラムの説明は下記コマンドで表示させる
mcols(res_wt_naomit_sort)
#データフレームの保存
write.table(res_wt_naomit, "Wald-test.result.txt", sep="\t", quote=F, row.names=F)

#作図（MA-plot）reference;http://array.cell-innovator.com/?p=1772
plotMA(res_wt_naomit, main="Differentially Expression miRNAs", ylim=c(-10,10))
dev.off()
#保存する exportで

#注目の遺伝子　
plotCounts(dds, gene="hsa-miR-21-5p", intgroup="condition")

#Volcano plot
#minumum p value
plotCounts(dds, gene=which.min(res_wt$padj), intgroup="condition")
par(mar=c(5,5,5,5), cex=1.0, cex.main=1.4, cex.axis=1.4, cex.lab=1.4)
topT <- as.data.frame(res_wt)
#Adjusted P values (FDR Q values)
with(topT, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot", cex=1.0, xlab=bquote(~Log[2]~fold~change), ylab=bquote(~-log[10]~Q~value)))
with(subset(topT, padj<0.05 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(padj), pch=20, col="red", cex=0.5))
with(subset(topT, padj<0.05 & abs(log2FoldChange)>2), text(log2FoldChange, -log10(padj), labels=subset(rownames(topT), topT$padj<0.05 & abs(topT$log2FoldChange)>2), cex=0.8, pos=3))
#Add lines for absolute FC>2 and P-value cut-off at FDR Q<0.05
abline(v=0, col="black", lty=3, lwd=1.0)
abline(v=-2, col="black", lty=4, lwd=2.0)
abline(v=2, col="black", lty=4, lwd=2.0)
abline(h=-log10(max(topT$pvalue[topT$padj<0.05], na.rm=TRUE)), col="black", lty=4, lwd=2.0)

#heatmap 
# refference 
# http://bioconductor.org/packages/devel/bioc/vignettes/DESeq2/inst/doc/DESeq2.html#exploring-and-exporting-results

# More information on results columns
mcols(res_wt_naomit)$description

#How many adjusted p-values were less than 0.1?
sum(res_wt$padj < 0.1, na.rm=TRUE)

# Data transformations and visualization
# Count data transformations
rld <- rlog(dds, blind=FALSE) #Regularized log transformation 

# Effects of transformations on the variance
ntd <- normTransform(dds)
class(ntd)

library("vsn")
library(hexbin)
meanSdPlot(assay(ntd))
meanSdPlot(assay(rld))



library("pheatmap")
#heatmap oredered by P value (https://www.biostars.org/p/179911/)
# We can order our results table by the smallest p value:
res_wtOrdered <- res_wt_naomit[order(res_wt_naomit$pvalue),]
summary(res_wtOrdered)

topgenes <- head(rownames(res_wtOrdered),100)
mat <- assay(rld)[topgenes,] #rld
mat <- mat - rowMeans(mat)
mat

df <- as.data.frame(colData(dds)[,c("condition")])
df
# Change the name of column 
colnames(df) <- 'condition'

#To change the name of genes
head(res_wt_naomit_sort, 30) #とりあえず30個
res_wt_naomit_annot_sort_30 <- res_wt_naomit_sort[1:30,]　
res_wt_naomit_annot_sort_30
rownames(df) <- colnames(mat) #rownames(data)  # data行の名前colnames(data2) data2の列の名前
h <- pheatmap(mat, show_colnames = T, annotation_col=df, fontsize =30, wide =7, height =20)
ggsave("heatmap.png", h, dpi = 300, width = 20, height = 40) 

# Principal component plot of the samples
plotPCA(rld, intgroup=c("condition")) #条件を増やすなら、,"~~~",というふうに加えていく 

pcaData <- plotPCA(rld, intgroup=c("condition"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
p <- ggplot(pcaData, aes(PC1, PC2, color=condition)) +
  geom_point(size=5) +
  xlab(paste0("PC1: ",percentVar[1],"% variance")) +
  ylab(paste0("PC2: ",percentVar[2],"% variance")) + 
  coord_fixed()
p
ggsave("PCA.png", p, dpi = 300, width = 6, height = 6) 
